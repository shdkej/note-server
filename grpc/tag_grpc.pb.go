// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagManagerClient is the client API for TagManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagManagerClient interface {
	GetTag(ctx context.Context, in *Message, opts ...grpc.CallOption) (*GetTagResponse, error)
	PutTag(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Message, error)
	GetTags(ctx context.Context, in *Message, opts ...grpc.CallOption) (TagManager_GetTagsClient, error)
}

type tagManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTagManagerClient(cc grpc.ClientConnInterface) TagManagerClient {
	return &tagManagerClient{cc}
}

func (c *tagManagerClient) GetTag(ctx context.Context, in *Message, opts ...grpc.CallOption) (*GetTagResponse, error) {
	out := new(GetTagResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.TagManager/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagManagerClient) PutTag(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/grpcserver.TagManager/PutTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagManagerClient) GetTags(ctx context.Context, in *Message, opts ...grpc.CallOption) (TagManager_GetTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagManager_ServiceDesc.Streams[0], "/grpcserver.TagManager/GetTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagManagerGetTagsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagManager_GetTagsClient interface {
	Recv() (*Note, error)
	grpc.ClientStream
}

type tagManagerGetTagsClient struct {
	grpc.ClientStream
}

func (x *tagManagerGetTagsClient) Recv() (*Note, error) {
	m := new(Note)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagManagerServer is the server API for TagManager service.
// All implementations must embed UnimplementedTagManagerServer
// for forward compatibility
type TagManagerServer interface {
	GetTag(context.Context, *Message) (*GetTagResponse, error)
	PutTag(context.Context, *Note) (*Message, error)
	GetTags(*Message, TagManager_GetTagsServer) error
	mustEmbedUnimplementedTagManagerServer()
}

// UnimplementedTagManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTagManagerServer struct {
}

func (UnimplementedTagManagerServer) GetTag(context.Context, *Message) (*GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedTagManagerServer) PutTag(context.Context, *Note) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTag not implemented")
}
func (UnimplementedTagManagerServer) GetTags(*Message, TagManager_GetTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedTagManagerServer) mustEmbedUnimplementedTagManagerServer() {}

// UnsafeTagManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagManagerServer will
// result in compilation errors.
type UnsafeTagManagerServer interface {
	mustEmbedUnimplementedTagManagerServer()
}

func RegisterTagManagerServer(s grpc.ServiceRegistrar, srv TagManagerServer) {
	s.RegisterService(&TagManager_ServiceDesc, srv)
}

func _TagManager_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagManagerServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.TagManager/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagManagerServer).GetTag(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagManager_PutTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagManagerServer).PutTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.TagManager/PutTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagManagerServer).PutTag(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagManager_GetTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagManagerServer).GetTags(m, &tagManagerGetTagsServer{stream})
}

type TagManager_GetTagsServer interface {
	Send(*Note) error
	grpc.ServerStream
}

type tagManagerGetTagsServer struct {
	grpc.ServerStream
}

func (x *tagManagerGetTagsServer) Send(m *Note) error {
	return x.ServerStream.SendMsg(m)
}

// TagManager_ServiceDesc is the grpc.ServiceDesc for TagManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.TagManager",
	HandlerType: (*TagManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTag",
			Handler:    _TagManager_GetTag_Handler,
		},
		{
			MethodName: "PutTag",
			Handler:    _TagManager_PutTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTags",
			Handler:       _TagManager_GetTags_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/tag.proto",
}
